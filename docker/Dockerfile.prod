# Build stage
FROM --platform=linux/amd64 python:3.11-slim AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    POETRY_VERSION=1.7.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_NO_INTERACTION=1

# Add Poetry to PATH
ENV PATH="$POETRY_HOME/bin:$PATH"

# Install system dependencies (curl, build-essential, libpq-dev) and clean apt cache
RUN apt-get update && apt-get install -y --no-install-recommends curl build-essential libpq-dev && rm -rf /var/lib/apt/lists/*

# Install Poetry (using curl)
RUN curl -sSL https://install.python-poetry.org | python3 -

# Set working directory
WORKDIR /app

# Copy pyproject.toml and poetry.lock (if any) into /app
COPY pyproject.toml poetry.lock* ./

# Create a virtual environment (venv) at /opt/venv and install dependencies (using --only main) into it
RUN python -m venv /opt/venv && . /opt/venv/bin/activate && poetry install --only main

# Copy the rest of the application code (so that the venv is populated) and install the project (if needed)
COPY . .
# (If you need to install the project, uncomment the next line; otherwise, the venv already has the dependencies.)
# RUN . /opt/venv/bin/activate && poetry install --only main

# Production stage
FROM --platform=linux/amd64 python:3.11-slim

# Set environment variables (including PATH so that the venv's bin is used)
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH"

# Install system dependencies (only libpq5) and clean apt cache
RUN apt-get update && apt-get install -y --no-install-recommends libpq5 && rm -rf /var/lib/apt/lists/*

# Copy the virtual environment (and the application code) from the builder stage
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder /app /app

# Set working directory (if needed)
WORKDIR /app

# Create a non-root user (app) and chown /app (so that the app runs as non-root)
RUN useradd -m -u 1000 app && chown -R app:app /app

# Switch to the non-root user
USER app

# Expose port
EXPOSE 8080

# Set default command
CMD ["uvicorn", "apps.api.main:app", "--host", "0.0.0.0", "--port", "8080"] 